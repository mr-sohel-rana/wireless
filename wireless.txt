1. Write a Matlab  program to evaluate performance of a   1/2-rated convolutionally encoded DS CDMA system in AWGN channel													
 clear all;
close all;
msg=round(rand(1,1000));
trellis=poly2trellis(3,[6 7]);
user=convenc(msg,trellis);
length_user=length(user);
for i=1:length_user
    if user(i)==0
        user(i)=-1;
    end
end
fc=5000;
eb=.5;
bitrate=1000;
tb=1/bitrate;
chiprate=10000;
tc=1/chiprate;
t=tc:tc:tb*length_user;
basebandsig=[];
for i=1:length_user
    for j=tc:tc:tb
        if user(i)==1
            basebandsig=[basebandsig 1];
        else
            basebandsig=[basebandsig -1];
        end
    end
end
figure(1)
stairs(t(1:800),basebandsig(1:800))
xlabel('Time(sec)')
ylabel('Binary value')
set(gca,'ytick',[ -1  1 ])
title('A segment of original binary sequence for a single user')

bpskmod=[];
for i=1:length_user
    for j=tc:tc:tb
        bpskmod=[bpskmod sqrt(2*eb)*user(i)*cos(2*pi*fc*j)];
    end
end

number=length(t);
spectrum=abs(fft(bpskmod));
sampling_frequency=2*fc;
sampling_interval=(1.0/sampling_frequency);
nyquest_frequency=1.0/(2.0*sampling_interval);
for i=1:number
    frequency(i)=(1.0/(number*sampling_interval)).*i;
end
figure(2)
plot(frequency,spectrum)
title('Frequency Domain analysis of BPSK modulated signal for a single user')
xlabel('Frequency (Hz)')
ylabel('Magnitude')
grid on

seed=[1 -1 1 -1];
spreadspectrum=[];
pn=[];
for i=1:length_user
    for j=1:10
        pn=[pn seed(4)];
        if seed (4)==seed(3) temp=-1;
        else temp=1;
        end
        seed(4)=seed(3);
        seed(3)=seed(2);
        seed(2)=seed(1);
        seed(1)=temp;
    end
end

pnupsampled=[];
len_pn=length(pn);
for i=1:len_pn
    for j=10*tc:10*tc:tb
        if pn(i)==1
            pnupsampled=[pnupsampled 1];
        else
            pnupsampled=[pnupsampled -1];
        end
    end
end
length_pnupsampled=length(pnupsampled);
sigtx=bpskmod.*pnupsampled;
figure(3)
plot(t(1:200), sigtx(1:200))
title('A segment of Transmitted  DS CDMA signal')
xlabel('Time(sec)')
ylabel('Amplitude')
grid on

snr_in_dBs=0:1.0:10;
for m=1:length(snr_in_dBs)
    ber(m)=0.0;
    composite_signal=awgn(sigtx,snr_in_dBs(m),'measured');
    rx=composite_signal.*pnupsampled;
    demodcar=[];
    for i=1:length_user
        for j=tc:tc:tb
            demodcar=[demodcar sqrt(2*eb)*cos(2*pi*fc*j)];
        end
    end
    bpskdemod=rx.*demodcar;
    len_dmod=length(bpskdemod);
    sum=zeros(1,len_dmod/10);
    for i=1:len_dmod/10
        for j=(i-1)*10+1:i*10
            sum(i)=sum(i)+bpskdemod(j);
        end
    end
    rxbits=[];
    for i=1:length_user
        if sum(i)>0
            rxbits=[rxbits 1];
        else
            rxbits=[rxbits 0];
        end
    end
    tblen = 3; delay = tblen;
    decoded = vitdec(rxbits,trellis,tblen,'cont','hard');
    [number,rat] = biterr(decoded(delay+1:end),msg(1:end-delay));
    ber(m)=rat;
end
figure(4)
plot(snr_in_dBs,ber);
xlabel('Signal to noise ratio(dB)');
ylabel('BER');
legend('BER simulation for a single user');
title(' Coded BER simulation under AWGN chaanel ')
grid on


############# 222222222 ########
% 2.Write a Matlab  program to evaluate performance of a   1/2-rated convolutionally encoded DS CDMA system in AWGN and Rayleigh fading channel													
>> clear all;
close all;
msg=round(rand(1,1000));
trellis=poly2trellis(3,[6 7]);
user=convenc(msg,trellis);
length_user=length(user);
for i=1:length_user
    if user(i)==0
        user(i)=-1;
    end
end
fc=5000;
eb=.5;
bitrate=1000;
tb=1/bitrate;
chiprate=10000;
tc=1/chiprate;
t=tc:tc:tb*length_user;
basebandsig=[];
for i=1:length_user
    for j=tc:tc:tb
        if user(i)==1
            basebandsig=[basebandsig 1];
        else
            basebandsig=[basebandsig -1];
        end
    end
end
figure(1)
stairs(t(1:800),basebandsig(1:800))
xlabel('Time(sec)')
ylabel('Binary value')
set(gca,'ytick',[ -1  1 ])
title('A segment of original binary sequence for a single user')

bpskmod=[];
for i=1:length_user
    for j=tc:tc:tb
        bpskmod=[bpskmod sqrt(2*eb)*user(i)*cos(2*pi*fc*j)];
    end
end

number=length(t);
spectrum=abs(fft(bpskmod));
sampling_frequency=2*fc;
sampling_interval=(1.0/sampling_frequency);
nyquest_frequency=1.0/(2.0*sampling_interval);
for i=1:number
    frequency(i)=(1.0/(number*sampling_interval)).*i;
end
figure(2)
plot(frequency,spectrum)
title('Frequency Domain analysis of BPSK modulated signal for a single user')
xlabel('Frequency (Hz)')
ylabel('Magnitude')
grid on

seed=[1 -1 1 -1];
spreadspectrum=[];
pn=[];
for i=1:length_user
    for j=1:10
        pn=[pn seed(4)];
        if seed(4)==seed(3)
            temp=-1;
        else
            temp=1;
        end
        seed(4)=seed(3);
        seed(3)=seed(2);
        seed(2)=seed(1);
        seed(1)=temp;
    end
end

pnupsampled=[];
len_pn=length(pn);
for i=1:len_pn
    for j=10*tc:10*tc:tb
        if pn(i)==1
            pnupsampled=[pnupsampled 1];
        else
            pnupsampled=[pnupsampled -1];
        end
    end
end
length_pnupsampled=length(pnupsampled);
sigtx=bpskmod.*pnupsampled;
figure(3)
plot(t(1:200), sigtx(1:200))
title('A segment of Transmitted  DS CDMA signal')
xlabel('Time(sec)')
ylabel('Amplitude')
grid on

chan=rayleighchan(1/chiprate,100);
chan.ResetBeforeFiltering=0;
fad=abs(filter(chan,ones(size(sigtx))));
fadedsig=fad.*sigtx;

snr_in_dBs=0:1.0:10;
for m=1:length(snr_in_dBs)
    ber(m)=0.0;
    composite_signal=awgn(fadedsig,snr_in_dBs(m),'measured');
    rx=composite_signal.*pnupsampled;
    demodcar=[];
    for i=1:length_user
        for j=tc:tc:tb
            demodcar=[demodcar sqrt(2*eb)*cos(2*pi*fc*j)];
        end
    end
    bpskdemod=rx.*demodcar;
    len_dmod=length(bpskdemod);
    sum=zeros(1,len_dmod/10);
    for i=1:len_dmod/10
        for j=(i-1)*10+1:i*10
            sum(i)=sum(i)+bpskdemod(j);
        end
    end
    rxbits=[];
    for i=1:length_user
        if sum(i)>0
            rxbits=[rxbits 1];
        else
            rxbits=[rxbits 0];
        end
    end
    tblen = 3; delay = tblen;
    decoded = vitdec(rxbits,trellis,tblen,'cont','hard');
    [number,rat] = biterr(decoded(delay+1:end),msg(1:end-delay));
    ber(m)=rat;
end
figure(4)
plot(snr_in_dBs,ber);
xlabel('Signal to noise ratio(dB)');
ylabel('BER');
legend('BER simulation for a single user');
title('Coded BER simulation under AWGN and Rayleigh fading channel')
grid on

############## 3333333 ###########

% 3.Write a Matlab  program to evaluate performance of a   1/2-rated convolutionally encoded DS CDMA system in AWGN and Rician fading channel	
clear all;
close all;
msg=round(rand(1,1000));
trellis=poly2trellis(3,[6 7]);
user=convenc(msg,trellis);
length_user=length(user);
for i=1:length_user
    if user(i)==0
        user(i)=-1;
    end
end
fc=5000;
eb=.5;
bitrate=1000;
tb=1/bitrate;
chiprate=10000;
tc=1/chiprate;
t=tc:tc:tb*length_user;
basebandsig=[];
for i=1:length_user
    for j=tc:tc:tb
        if user(i)==1
            basebandsig=[basebandsig 1];
        else
            basebandsig=[basebandsig -1];
        end
    end
end
figure(1)
stairs(t(1:800),basebandsig(1:800))
xlabel('Time(sec)')
ylabel('Binary value')
set(gca,'ytick',[ -1  1 ])
title('A segment of original binary sequence for a single user')
bpskmod=[];
for i=1:length_user
    for j=tc:tc:tb
        bpskmod=[bpskmod sqrt(2*eb)*user(i)*cos(2*pi*fc*j)];
    end
end
number=length(t);
spectrum=abs(fft(bpskmod));
sampling_frequency=2*fc;
sampling_interval=(1.0/sampling_frequency);
nyquest_frequency=1.0/(2.0*sampling_interval);
for i=1:number
    frequency(i)=(1.0/(number*sampling_interval)).*i;
end
figure(2)
plot(frequency,spectrum)
title('Frequency Domain analysis of BPSK modulated signal for a single user')
xlabel('Frequency (Hz)')
ylabel('Magnitude')
grid on
seed=[1 -1 1 -1];
spreadspectrum=[];
pn=[];
for i=1:length_user
    for j=1:10
        pn=[pn seed(4)];
        if seed(4)==seed(3)
            temp=-1;
        else
            temp=1;
        end
        seed(4)=seed(3);
        seed(3)=seed(2);
        seed(2)=seed(1);
        seed(1)=temp;
    end
end
pnupsampled=[];
len_pn=length(pn);
for i=1:len_pn
    for j=10*tc:10*tc:tb
        if pn(i)==1
            pnupsampled=[pnupsampled 1];
        else
            pnupsampled=[pnupsampled -1];
        end
    end
end
length_pnupsampled=length(pnupsampled);
sigtx=bpskmod.*pnupsampled;
figure(3)
plot(t(1:200), sigtx(1:200))
title('A segment of Transmitted  DS CDMA signal')
xlabel('Time(sec)')
ylabel('Amplitude')
grid on
chan=ricianchan(1/chiprate,100,15);
chan.ResetBeforeFiltering=0;
fad=abs(filter(chan,ones(size(sigtx))));
fadedsig=fad.*sigtx;
snr_in_dBs=0:1.0:10;
for m=1:length(snr_in_dBs)
    ber(m)=0.0;
    composite_signal=awgn(fadedsig,snr_in_dBs(m),'measured');
    rx=composite_signal.*pnupsampled;
    demodcar=[];
    for i=1:length_user
        for j=tc:tc:tb
            demodcar=[demodcar sqrt(2*eb)*cos(2*pi*fc*j)];
        end
    end
    bpskdemod=rx.*demodcar;
    len_dmod=length(bpskdemod);
    sum=zeros(1,len_dmod/10);
    for i=1:len_dmod/10
        for j=(i-1)*10+1:i*10
            sum(i)=sum(i)+bpskdemod(j);
        end
    end
    rxbits=[];
    for i=1:length_user
        if sum(i)>0
            rxbits=[rxbits 1];
        else
            rxbits=[rxbits 0];
        end
    end
    tblen = 3; delay = tblen;
    decoded = vitdec(rxbits,trellis,tblen,'cont','hard');
    [number,rat] = biterr(decoded(delay+1:end),msg(1:end-delay));
    ber(m)=rat;
end
figure(4)
plot(snr_in_dBs,ber);
xlabel('Signal to noise ratio(dB)');
ylabel('BER');
legend('BER simulation for a single user');
title(' Coded BER simulation under AWGN and Rician fading channel ')
grid on


############ 44444444444 $###############
%4. Write a  Matlab program to study the performance of a  differentially encoded OQPSK based wireless communication system
clear all;
close all;
xbit=[1 0 1 1 0 1 0 0 0 1 1 0];
difencod(1)=~(1-xbit(1));
for i=2:length(xbit)
    difencod(i)=~(difencod(i-1)-xbit(i));
end
xbit(1)=1-~(difencod(1));
for i=2:length(xbit)
    xbit(i)=difencod(i-1)-~(difencod(i));
    if(xbit(i)==-1)
        xbit(i)=1;
    end
end
for i=1:2:(length(difencod)-1)
    inp(i)=difencod(i);
    inp(i+1)=inp(i);
end
for i=2:2:(length(difencod))
    qp(i)=difencod(i);
    qp(i-1)=qp(i);
end
for i=1:(length(inp))
    if(inp(i)== 1)
        it(i)=1;
    elseif(inp(i)==0)
        it(i)=-1;
    end
end
for i=1:(length(qp))
    if(qp(i)== 1)
        qt(i)=1;
    elseif(qp(i)==0)
        qt(i)=-1;
    end
end
filtorder = 40;
nsamp=4;
delay = filtorder/(nsamp*2);
rolloff = 0.5;
rrcfilter = rcosine(1,nsamp,'fir/normal',rolloff,delay);
figure(1);
impz(rrcfilter,1);
grid on
itx = rcosflt(it,1,nsamp,'filter',rrcfilter);
Drate=64000;
T=1/Drate;
Ts=T/nsamp;
time=0:Ts:(length(itx)-1)*Ts;
figure(2);
plot(time,itx)
xlabel( 'Time(sec)');
ylabel( 'Amplitude(volt)');
grid on
tme=Ts:Ts:(length(itx)-1)*Ts+Ts;
qtx = rcosflt(qt,1,nsamp,'filter',rrcfilter);
figure(3);
plot(tme,qtx)
xlabel( 'Time(sec)');
ylabel( 'Amplitude(volt)');
grid on
fc=900*100000;
dd=2*pi*fc*time';
ddd=2*pi*fc*tme';
delay(1:nsamp)=0.0;
delay((nsamp+1):length(qtx))=qtx(1:(length(qtx)-nsamp));
half=filtorder/2;
mt=(cos(dd)).*itx+(sin(ddd)).*delay';
figure(4);
plot(time,mt)
xlabel( 'Time(sec)');
ylabel( 'Amplitude(volt)');
grid on
snr=10;
madd=awgn(mt,snr);
figure(5);
plot(time,madd)
grid on
xlabel( 'Time(sec)');
ylabel( 'Amplitude(volt)');
cscomp=mt.*(cos(dd));
sincomp=mt.*(sin(ddd));
plot(time,cscomp)
grid on
xlabel( 'Time(sec)');
ylabel( 'Amplitude(volt)');
lpfin = rcosflt(cscomp,1,nsamp,'filter',rrcfilter);
lpfqu = rcosflt(sincomp,1,nsamp,'filter',rrcfilter);
tmx=0:Ts:(length(lpfin)-1)*Ts;
tmy=Ts:Ts:(length(lpfqu)-1)*Ts+Ts;
figure(5);
plot(tmx,lpfin)
grid on
xlabel( 'Time(sec)');
ylabel( 'Amplitude');
figure(6);
plot(tmy,lpfqu)
grid on
xlabel( 'Time(sec)');
ylabel( 'Amplitude(volt)');
itxx=itx(half:nsamp:length(xbit)*nsamp+half-1);
for i=1:1:length(itxx)
    if(itxx(i)> 0)
        chk1(i)=1;
    elseif(itxx(i)< 0)
        chk1(i)=-1;
    end
end
ityy=qtx(half:nsamp:length(xbit)*nsamp+half-1);
for i=1:1:length(ityy)
    if(ityy(i)> 0)
        chk2(i)=1;
    elseif(ityy(i)< 0)
        chk2(i)=-1;
    end
end
disp('I channel bit stream checking')
distortion = sum((it-chk1).^2)/length(chk1);
distortion
disp('Q channel bit stream checking')
distortion = sum((qt-chk2).^2)/length(chk2);
distortion
for i=1:2:(length(xbit)-1)
    dfd(i)=chk1(i);
end
for i=2:2:(length(xbit))
    dfd(i)=chk2(i);
end
for i=1:(length(xbit))
    if(dfd(i)== 1)
        dfdecod(i)=1;
    elseif(dfd(i)==-1)
        dfdecod(i)=0;
    end
end
detected(1)=1-~(dfdecod(1));
for i=2:length(xbit)
    detected(i)=dfdecod(i-1)-(~dfdecod(i));
    if(detected(i)==-1)
        detected(i)=1;
    end
end
disp('Distortion between transmitted and received NRZ  bit stream')
distortion = sum((xbit-detected).^2)/length(detected);
distortion
tmx=0:(1/64000):(1/64000).*(length(xbit)-1);
figure(7);
subplot(211)
stairs(tmx,xbit)
set(gca,'ytick',[ 0  1 ])
grid on
xlabel( 'Time(sec)');
ylabel( 'Binary value');
subplot(212)
stairs(tmx,detected)
xlabel( 'Time(sec)');
set(gca,'ytick',[ 0  1 ])
ylabel( 'Binary value');
grid on

####### 5555555 ############

Expt 5:Develop a matlab source to simulate an Interleaved  FEC encoded wireless communication 													
  system with implementation of BPSK digital modulation technique													
Show atleast three waveforms generated at different sections of the simulated system													
clear all;
close all;
f=1000;
Fs =4000;
t = [1/Fs:1/Fs:1];
Am=1.0;
signal = Am*sin(2*pi*1000*t);
figure(1);
plot(t(1:200),signal(1:200))
set(gca,'ytick',[ -1.0   0 1.0 ])
title('A segment of synthetically generated sinusiodal wavform')
grid on
xlabel( 'time(sec)');
ylabel( 'Amplitude(volt)');
maximumvalue=max(signal);
minimumvalue=min(signal);
interval=(maximumvalue-minimumvalue)/255;
partition = [minimumvalue:interval:maximumvalue];
codebook = [(minimumvalue-interval):interval:maximumvalue];
[index,quants,distor] = quantiz(signal,partition,codebook);
indxtrn=index';
for i=1:4000
    matrix(i,1:1:8)=bitget(uint8(indxtrn(i)),1:1:8);
end
matrixtps=matrix';
baseband=reshape(matrixtps,4000*8,1);
Tb=1/32000;
time=[0:Tb:1];
figure(2);
stairs(time(1:500),baseband(1:500))
title(' A segment of baseband signal')
xlabel('Time(sec)')
ylabel('Binary value')
set(gca,'ytick',[0  1 ])
axis([0,time(500),0,1])
input_to_Convolutional_encoder = baseband';
t=poly2trellis(7, [171 133]);
code = convenc(input_to_Convolutional_encoder,t);
st2 = 4831;
data_interleave = randintrlv(code,st2);
M=2;
k=log2(M);
symbol=bi2de(reshape(data_interleave,k,length(data_interleave)/k).','left-msb');
symbol=double(symbol);
Binary_phase_shift_keying_modulated_data = pskmod(symbol,M);
Binary_phase_shift_keying_demodulated_data = pskdemod(Binary_phase_shift_keying_modulated_data,M);
[number,ratio]= symerr(symbol,Binary_phase_shift_keying_demodulated_data)
Retrieved_bit = de2bi(Binary_phase_shift_keying_demodulated_data,'left-msb');
errors = zeros(size(Retrieved_bit));
inter_err = bitxor(Retrieved_bit,errors);
data_deinterleave=randdeintrlv(inter_err,st2);
tblen=3;
decodx= vitdec(data_deinterleave,t,tblen,'cont','hard');
N3=length(decodx);
NN=N3/8;
decod2(1:(N3-3))=decodx(tblen+1:end);
decod2(N3)=decodx(1);
decod2=decod2';
baseband=double(baseband);
[number,ratio]= biterr(decod2,baseband);
convert=reshape(decod2,8,4000);
matrixtps=double(matrixtps);
[number,ratio]= biterr(convert,matrixtps);
convert=convert';
intconv=bi2de(convert);
[number,ratio]= biterr(intconv,index');
sample_value=minimumvalue +intconv.*interval;
figure(3)
subplot(2,1,1)
plot(time(1:100),signal(1:100));
set(gca,'ytick',[ -1.0   0 1.0 ])
axis([0,time(100),-1,1])
title('Graph for a segment of recoded Audio signal')
xlabel('Time(sec)')
ylabel('Amplitude')
grid on
subplot(2,1,2)
plot(time(1:100),sample_value(1:100));
axis([0,time(100),-1,1])
set(gca,'ytick',[ -1.0   0 1.0 ])
title('Graph for a segment of retrieved Audio signal')
xlabel('Time(sec)')
ylabel('Amplitude')
grid on

######## 6666 #########
Expt 6:Develop a matlab source to simulate an Interleaved  FEC encoded wireless communication 													
 communication system with implementation of QPSK digital modulation technique													
Show atleast three waveforms generated at different sections of the simulated system
clear all;
close all;
f=1000;
Fs =4000;
t = [1/Fs:1/Fs:1];
Am=1.0;
signal = Am*sin(2*pi*1000*t);
figure(1);
plot(t(1:200),signal(1:200))
set(gca,'ytick',[ -1.0   0 1.0 ])
title('A segment of synthetically generated sinusiodal wavform')
grid on
xlabel('time(sec)');
ylabel('Amplitude(volt)');
maximumvalue=max(signal);
minimumvalue=min(signal);
interval=(maximumvalue-minimumvalue)/255;
partition = [minimumvalue:interval:maximumvalue];
codebook = [(minimumvalue-interval):interval:maximumvalue];
[index,quants,distor] = quantiz(signal,partition,codebook);
indxtrn=index';
for i=1:4000
    matrix(i,1:1:8)=bitget(uint8(indxtrn(i)),1:1:8);
end
matrixtps=matrix';
baseband=reshape(matrixtps,4000*8,1);
Tb=1/32000;
time=[0:Tb:1];
figure(2);
stairs(time(1:500),baseband(1:500))
title(' A segment of baseband signal')
xlabel('Time(sec)')
ylabel('Binary value')
set(gca,'ytick',[0  1 ])
axis([0,time(500),0,1])
input_to_Convolutional_encoder = baseband';
t=poly2trellis(7, [171 133]);
code = convenc(input_to_Convolutional_encoder,t);
st2 = 4831;
data_interleave = randintrlv(code,st2);
M=4;
k=log2(M);
baseband=double(baseband);
symbol=bi2de(reshape(data_interleave,k,length(data_interleave)/k).','left-msb');
Quadrature_phase_shift_keying_modulated_data = pskmod(symbol,M);
Quadrature_phase_shift_keying_demodulated_data = pskdemod(Quadrature_phase_shift_keying_modulated_data,M);
[number,ratio]= symerr(symbol,Quadrature_phase_shift_keying_demodulated_data)
Retrieved_bit = de2bi(Quadrature_phase_shift_keying_demodulated_data,'left-msb');
Retrieved_bit=Retrieved_bit';
Retrieved_bit=reshape(Retrieved_bit, 64000,1);
errors = zeros(size(Retrieved_bit));
inter_err = bitxor(Retrieved_bit,errors);
data_deinterleave=randdeintrlv(inter_err,st2);
tblen=3;
decodx= vitdec(data_deinterleave,t,tblen,'cont','hard');
N3=length(decodx);
NN=N3/8;
decod2(1:(N3-3))=decodx(tblen+1:end);
decod2(N3)=decodx(1);
decod2=decod2';
baseband=double(baseband);
[number,ratio]= biterr(decod2,baseband)
convert=reshape(decod2,8,4000);
matrixtps=double(matrixtps);
[number,ratio]= biterr(convert,matrixtps)
convert=convert';
intconv=bi2de(convert);
[number,ratio]= biterr(intconv,index');
sample_value=minimumvalue +intconv.*interval;
figure(3)
subplot(2,1,1)
plot(time(1:100),signal(1:100));
set(gca,'ytick',[ -1.0   0 1.0 ])
axis([0,time(100),-1,1])
title('Graph for a segment of recoded Audio signal')
xlabel('Time(sec)')
ylabel('Amplitude')
grid on
subplot(2,1,2)
plot(time(1:100),sample_value(1:100));
axis([0,time(100),-1,1])
set(gca,'ytick',[ -1.0   0 1.0 ])
title('Graph for a segment of retrieved Audio signal')
xlabel('Time(sec)')
ylabel('Amplitude')
grid on

################### 7777777  #######
Expt 7:Develop a matlab source to simulate an Interleaved  FEC encoded wireless communication 													
 communication system with implementation of 4-QAM digital modulation technique													
Show atleast three waveforms generated at different sections of the simulated system

clear all;
close all;
f=1000;
Fs =4000;
t = [1/Fs:1/Fs:1];
Am=1.0;
signal = Am*sin(2*pi*1000*t);
figure(1);
plot(t(1:200),signal(1:200))
set(gca,'ytick',[ -1.0   0 1.0 ])
title('A segment of synthetically generated sinusiodal wavform')
grid on
xlabel('time(sec)');
ylabel('Amplitude(volt)');
maximumvalue=max(signal);
minimumvalue=min(signal);
interval=(maximumvalue-minimumvalue)/255;
partition = [minimumvalue:interval:maximumvalue];
codebook = [(minimumvalue-interval):interval:maximumvalue];
[index,quants,distor] = quantiz(signal,partition,codebook);
indxtrn=index';
for i=1:4000
    matrix(i,1:1:8)=bitget(uint8(indxtrn(i)),1:1:8);
end
matrixtps=matrix';
baseband=reshape(matrixtps,4000*8,1);
Tb=1/32000;
time=[0:Tb:1];
figure(2);
stairs(time(1:500),baseband(1:500))
title(' A segment of baseband signal')
xlabel('Time(sec)')
ylabel('Binary value')
set(gca,'ytick',[0  1 ])
axis([0,time(500),0,1])
input_to_Convolutional_encoder = baseband';
t=poly2trellis(7, [171 133]);
code = convenc(input_to_Convolutional_encoder,t);
st2 = 4831;
data_interleave = randintrlv(code,st2);
M=4;
k=log2(M);
baseband=double(baseband);
symbol=bi2de(reshape(data_interleave,k,length(data_interleave)/k).','left-msb');
Quadrature_amplitude_modulated_data = qammod(symbol,M);
Quadrature_amplitude_demodulated_data = qamdemod(Quadrature_amplitude_modulated_data,M);
[number,ratio]= symerr(symbol,Quadrature_amplitude_demodulated_data)
Retrieved_bit = de2bi(Quadrature_amplitude_demodulated_data,'left-msb');
Retrieved_bit=Retrieved_bit';
Retrieved_bit=reshape(Retrieved_bit, 64000,1);
errors = zeros(size(Retrieved_bit));
inter_err = bitxor(Retrieved_bit,errors);
data_deinterleave=randdeintrlv(inter_err,st2);
tblen=3;
decodx= vitdec(data_deinterleave,t,tblen,'cont','hard');
N3=length(decodx);
NN=N3/8;
decod2(1:(N3-3))=decodx(tblen+1:end);
decod2(N3)=decodx(1);
decod2=decod2';
baseband=double(baseband);
[number,ratio]= biterr(decod2,baseband)
convert=reshape(decod2,8,4000);
matrixtps=double(matrixtps);
[number,ratio]= biterr(convert,matrixtps)
convert=convert';
intconv=bi2de(convert);
[number,ratio]= biterr(intconv,index');
sample_value=minimumvalue +intconv.*interval;
figure(3)
subplot(2,1,1)
plot(time(1:100),signal(1:100));
set(gca,'ytick',[ -1.0   0 1.0 ])
axis([0,time(100),-1,1])
title('Graph for a segment of recoded Audio signal')
xlabel('Time(sec)')
ylabel('Amplitude')
grid on
subplot(2,1,2)
plot(time(1:100),sample_value(1:100));
axis([0,time(100),-1,1])
set(gca,'ytick',[ -1.0   0 1.0 ])
title('Graph for a segment of retrieved Audio signal')
xlabel('Time(sec)')
ylabel('Amplitude')
grid on


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%													
Expt 8:Develop a matlab source to simulate an Interleaved  FEC encoded wireless communication 													
communication system with implementation of 16-QAM digital modulation technique													
Show atleast three waveforms generated at different sections of the simulated system													
clear all;
close all;
f=1000;
Fs=4000;
t=[1/Fs:1/Fs:1];
Am=1.0;
signal=Am*sin(2*pi*1000*t);
figure(1);
plot(t(1:200),signal(1:200))
set(gca,'ytick',[-1.0 0 1.0])
title('A segment of synthetically generated sinusiodal wavform')
grid on
xlabel('time(sec)');
ylabel('Amplitude(volt)');
maximumvalue=max(signal);
minimumvalue=min(signal);
interval=(maximumvalue-minimumvalue)/255;
partition=[minimumvalue:interval:maximumvalue];
codebook=[(minimumvalue-interval):interval:maximumvalue];
[index,quants,distor]=quantiz(signal,partition,codebook);
indxtrn=index';
for i=1:4000
    matrix(i,1:1:8)=bitget(uint8(indxtrn(i)),1:1:8);
end
matrixtps=matrix';
baseband=reshape(matrixtps,4000*8,1);
Tb=1/32000;
time=[0:Tb:1];
figure(2);
stairs(time(1:500),baseband(1:500))
title('A segment of baseband signal')
xlabel('Time(sec)')
ylabel('Binary value')
set(gca,'ytick',[0 1])
axis([0,time(500),0,1])
input_to_Convolutional_encoder=baseband';
t=poly2trellis(7,[171 133]);
code=convenc(input_to_Convolutional_encoder,t);
st2=4831;
data_interleave=randintrlv(code,st2);
M=16;
k=log2(M);
baseband=double(baseband);
symbol=bi2de(reshape(data_interleave,k,length(data_interleave)/k).','left-msb');
Quadrature_amplitude_modulated_data=qammod(symbol,M);
Quadrature_amplitude_demodulated_data=qamdemod(Quadrature_amplitude_modulated_data,M);
[number,ratio]=symerr(symbol,Quadrature_amplitude_demodulated_data)
Retrieved_bit=de2bi(Quadrature_amplitude_demodulated_data,'left-msb');
Retrieved_bit=Retrieved_bit';
Retrieved_bit=reshape(Retrieved_bit,64000,1);
errors=zeros(size(Retrieved_bit));
inter_err=bitxor(Retrieved_bit,errors);
data_deinterleave=randdeintrlv(inter_err,st2);
tblen=3;
decodx=vitdec(data_deinterleave,t,tblen,'cont','hard');
N3=length(decodx);
NN=N3/8;
decod2(1:(N3-3))=decodx(tblen+1:end);
decod2(N3)=decodx(1);
decod2=decod2';
baseband=double(baseband);
[number,ratio]=biterr(decod2,baseband)
convert=reshape(decod2,8,4000);
matrixtps=double(matrixtps);
[number,ratio]=biterr(convert,matrixtps)
convert=convert';
intconv=bi2de(convert);
[number,ratio]=biterr(intconv,index');
sample_value=minimumvalue+intconv.*interval;
figure(3)
subplot(2,1,1)
plot(time(1:100),signal(1:100));
set(gca,'ytick',[-1.0 0 1.0])
axis([0,time(100),-1,1])
title('Graph for a segment of recoded Audio signal')
xlabel('Time(sec)')
ylabel('Amplitude')
grid on
subplot(2,1,2)
plot(time(1:100),sample_value(1:100));
axis([0,time(100),-1,1])
set(gca,'ytick',[-1.0 0 1.0])
title('Graph for a segment of retrieved Audio signal')
xlabel('Time(sec)')
ylabel('Amplitude')
grid on

													
